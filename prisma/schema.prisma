generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  email          String          @unique
  name           String?
  emailVerified  DateTime?
  image          String?
  first_name     String?
  last_name      String?
  dateOfBirth    DateTime?
  phone          String?
  street         String?
  city           String?
  state          String?
  country        String?
  zipCode        String?
  hashedPassword String?
  gender         String?
  location       String?
  role           String          @default("user")
  languages      Language[]
  education      Education[]
  talentPool     TalentPool[]
  jobProfile     JobProfile[]
  talentProfile  TalentProfile[]
  accounts       Account[]
  sessions       Session[]
  otps           OTP[]
  cvs            CV[]
  credits        Int             @default(0)
  isRegistered   Boolean         @default(false)
  interviews     Interview[]
  // posts            Modules[]
  // communityIds     String[]        @db.ObjectId
  // communities      Community[]     @relation(fields: [communityIds], references: [id])
  // seenMessageIds   String[]        @db.ObjectId
  // seenMessages     Message[]       @relation("Seen", fields: [seenMessageIds], references: [id])
  // messages         Message[]
  // sentmessages     Directmessage[] @relation("SenderUser")
  // receivedMessages Directmessage[] @relation("ReceiverUser")
  JobCandidate   JobCandidate[]
  // newsletters    Newsletter[]    @relation("NewsletterRecipients")
  Resume         Resume[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Language {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  language    String
  proficiency String
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Education {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  school      String
  degree      String?
  field       String?
  grade       String?
  startDate   DateTime?
  endDate     DateTime?
  description String?
  skills      String[]
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model OTP {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  otp       String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resume {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  resumeUrl  String
  resumeName String?
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// recruiter
model TalentPool {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  userId       String        @db.ObjectId
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills       String[]
  profiles     String[]
  salary       String
  locationPref String
  talents      TalentMatch[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model TalentMatch {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  talentId     String        @db.ObjectId
  talent       TalentProfile @relation(fields: [talentId], references: [id], onDelete: Cascade)
  talentPoolId String        @db.ObjectId
  talentPool   TalentPool    @relation(fields: [talentPoolId], references: [id], onDelete: Cascade)
  isMatched    Boolean       @default(false)
  isHired      Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([talentId, talentPoolId])
}

model TalentProfile {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  resumeUrl     String
  title         String?
  description   String?
  rate          String?
  skills        String[]
  profiles      String[]
  hours         String?
  availability  String?
  target        String?
  interviewDate DateTime?
  interviews    Interview[]
  talentMatch   TalentMatch[]
  projects      Project[]
  employment    Employment[]
  candidates    JobCandidate[]
  moreSections  MoreSections[]
  userId        String         @db.ObjectId
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Project {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  role            String?
  url             String?
  skills          String[]
  talentProfileId String        @db.ObjectId
  talentProfile   TalentProfile @relation(fields: [talentProfileId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Employment {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  company         String
  position        String
  startDate       DateTime
  endDate         DateTime?
  description     String?
  location        String?
  skills          String[]
  talentProfileId String        @db.ObjectId
  talentProfile   TalentProfile @relation(fields: [talentProfileId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model MoreSections {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  profileSection  ProfileSection[]
  TalentProfile   TalentProfile?   @relation(fields: [talentProfileId], references: [id])
  talentProfileId String?          @db.ObjectId
}

type ProfileSection {
  title       String
  description String
  skills      String[]
}

model JobProfile {
  id                   String         @id @default(auto()) @map("_id") @db.ObjectId
  jobTitle             String
  jobRole              String
  jobDescription       String
  company              String
  startDate            DateTime
  endDate              DateTime?
  registrationDeadline DateTime
  skills               String[]
  profiles             String[]
  salary               String
  location             String
  rounds               JobRound[]
  availability         Availability
  completion           Int            @default(0)
  userId               String         @db.ObjectId
  user                 User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  JobCandidate         JobCandidate[]
}

enum Availability {
  FULL_TIME
  PART_TIME
  INTERN
  CONTRACT
}

model JobRound {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  roundName           String
  roundNumber         Int
  details             String
  roundType           String
  roundDate           DateTime
  candidatesQualified QualifiedRounds[]
  jobProfileId        String             @db.ObjectId
  jobProfile          JobProfile         @relation(fields: [jobProfileId], references: [id], onDelete: Cascade)
  rubrics             JobRoundRubric[]   
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

//Evaluation Criteria for each JobRound created by recruiter

model JobRoundRubric {                  
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  parameter   String
  description String
  weightage   Int
  type        String
  condition   String
  jobRound    JobRound  @relation(fields: [jobRoundId], references: [id], onDelete: Cascade)  
  jobRoundId  String    @db.ObjectId     
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model JobCandidate {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  candidateId     String            @db.ObjectId
  candidate       User              @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  status          JobStatus         @default(APPLIED)
  qualifiedRounds QualifiedRounds[]
  jobProfileId    String?           @db.ObjectId
  JobProfile      JobProfile?       @relation(fields: [jobProfileId], references: [id], onDelete: Cascade)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  TalentProfile   TalentProfile?    @relation(fields: [talentProfileId], references: [id])
  talentProfileId String?           @db.ObjectId
}

enum JobStatus {
  APPLIED
  REJECTED
  SELECTED
}

model QualifiedRounds {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  score          Int?
  jobCandidateId String?       @db.ObjectId
  JobCandidate   JobCandidate? @relation(fields: [jobCandidateId], references: [id], onDelete: Cascade)
  jobRoundId     String?       @db.ObjectId
  JobRound       JobRound?     @relation(fields: [jobRoundId], references: [id], onDelete: Cascade)
}

model CV {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  Resume         String
  JobDescription String
  userId         String?  @db.ObjectId
  user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  analysis       CVanalysis
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
model CVAnalysis {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  cvId                String   @db.ObjectId
  cv                  CV       @relation(fields: [cvId], references: [id], onDelete: Cascade)
  summary             String? 
  resumeScore         Float?
  hardSkillsScore     Float?   
  softSkillsScore     Float?   
  experienceScore     Float?   
  educationScore      Float?   
  quantificationIssues String[] 
  bulletPointLength   Json?    
  bulletPointImprovements Json? 
  verbTenseIssues     Json?   
  weakVerbUsage       Json?   
  repetitionIssues    Json?    
  sectionFeedback     Json?    
  skillAnalysis       Json?   
  spellingIssues      String[] 
  responsibilityIssues Json?  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}
model Interview {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  cvText            String?
  jdText            String?
  audioUrl          String?
  videoUrl          String?
  User              User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String              @db.ObjectId
  messages          InterviewMessage[]
  isStarted         Boolean             @default(false)
  InterviewFeedback InterviewFeedback[]
  Analysis          Analysis[]
  isCompleted       Boolean             @default(false)
  isFeedbackGiven   Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  TalentProfile     TalentProfile?      @relation(fields: [talentProfileId], references: [id])
  talentProfileId   String?             @db.ObjectId
}

model InterviewMessage {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  interviewId String    @db.ObjectId
  type        String
  sender      String
  response    String
  code        String?
  createdAt   DateTime  @default(now())
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
}

model InterviewFeedback {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  feedback    String
  rating      Int
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  interviewId String    @db.ObjectId
  createdAt   DateTime  @default(now())
}

model Analysis {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  Introduction Json
  Project      Json
  Coding       Json
  Technical    Json
  Outro        Json
  createdAt    DateTime  @default(now())
  interview    Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  interviewId  String    @db.ObjectId
  updatedAt    DateTime  @updatedAt
}

enum EmailStatus{
  Delivered
  Opened
}

model Email {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  emailAddress String
  status       EmailStatus     @default(Delivered)
  openedAt     DateTime?
  newsletterId String     @db.ObjectId
  newsletter   Newsletter @relation(fields: [newsletterId], references: [id])
}



model Newsletter {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  subject       String
  content       String?
  template      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  sentTimestamp DateTime
  openCount     Int?
  emails        Email[]
}

// model Modules {
//   id             String     @id @default(auto()) @map("_id") @db.ObjectId
//   Module_Name    String     @unique
//   No_of_Chapters String
//   No_of_Lessons  String
//   No_of_Weeks    String
//   No_of_Credits  String
//   Projects       String
//   author         User       @relation(fields: [authorId], references: [id])
//   authorId       String     @db.ObjectId
//   chapters       Chapters[]
// }

// model Chapters {
//   id           String   @id @default(auto()) @map("_id") @db.ObjectId
//   Chapter_Name String
//   Lessons      String
//   chapter      Modules  @relation(fields: [chapterId], references: [id])
//   chapterId    String   @db.ObjectId
//   lessons      Lesson[]
// }

// model Lesson {
//   id            String   @id @default(auto()) @map("_id") @db.ObjectId
//   Lesson_Name   String
//   lab           String?
//   content_url   String
//   video_url     String
//   Assesment_url String
//   chapter       Chapters @relation(fields: [chapterId], references: [id])
//   chapterId     String   @db.ObjectId
// }

// model Community {
//   id            String    @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt     DateTime  @default(now())
//   lastmessageAt DateTime  @default(now())
//   name          String    @unique
//   description   String?
//   isCommunity   Boolean?
//   comm_type     String
//   messagesIds   String?   @db.ObjectId
//   messages      Message[]
//   userIds       String[]  @db.ObjectId
//   users         User[]    @relation(fields: [userIds], references: [id])
// }

// model Message {
//   id          String    @id @default(auto()) @map("_id") @db.ObjectId
//   content     String
//   type        String
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
//   seenIds     String[]  @db.ObjectId
//   seen        User[]    @relation("Seen", fields: [seenIds], references: [id])
//   communityId String    @db.ObjectId
//   community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
//   senderId    String    @db.ObjectId
//   sender      User      @relation(fields: [senderId], references: [id], onDelete: Cascade)
// }

// model Directmessage {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   content    String
//   createdAt  DateTime @default(now())
//   seen       Boolean?
//   receiverId String   @db.ObjectId
//   receiver   User     @relation("ReceiverUser", fields: [receiverId], references: [id], onDelete: Cascade)
//   senderId   String   @db.ObjectId
//   sender     User     @relation("SenderUser", fields: [senderId], references: [id], onDelete: Cascade)
// }

// model Blog {
//   id          String    @id @default(auto()) @map("_id") @db.ObjectId
//   title       String
//   description String
//   authorName  String
//   position    String
//   sections    Section[]
//   image       String
// }

// model Section {
//   id         String @id @default(auto()) @map("_id") @db.ObjectId
//   blogId     String @db.ObjectId
//   subheading String
//   content    String
//   blog       Blog   @relation(fields: [blogId], references: [id])
// }
